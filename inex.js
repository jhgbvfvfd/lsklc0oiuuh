import express from "express";
import { TelegramClient, Api } from "telegram";
import { StringSession } from "telegram/sessions/index.js";
import { NewMessage } from "telegram/events/index.js";
import fs from "fs/promises";
import path from "path";
import https from "https";
import cors from "cors";
import { readFileSync } from "fs";

// --- Configuration ---
const PORT = process.env.PORT || 3000;
const API_ID = 25596034; // Replace with your API_ID
const API_HASH = "1492ef7644047f8a6170cdaa9b5c356f"; // Replace with your API_HASH

const API_KEY_DATA_DIR = "api_key_data";
const PENDING_KEYS_FILE = "pending_keys.json";
const PHONE_TO_API_KEY_MAP_FILE = "phone_to_api_key_map.json"; // Maps claimingPhone to API Key

const httpsAgent = new https.Agent({
  keepAlive: true,
  maxSockets: 50,
  timeout: 10000,
});

// --- Utility Functions ---
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
function calculateRemainingTime(expiresAt) {
  const now = Date.now();
  const diffMs = expiresAt - now;
  if (diffMs <= 0) return { days: 0, hours: 0, minutes: 0 };
  const days = Math.floor(diffMs / (1000 * 60 * 60 * 24));
  const hours = Math.floor((diffMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
  return { days, hours, minutes };
}

async function ensureDirExists(dirPath) {
  try {
    await fs.mkdir(dirPath, { recursive: true });
  } catch (error) {
    if (error.code !== 'EEXIST') {
      console.error(`‚ùå Error creating directory ${dirPath}:`, error.message);
      throw error;
    }
  }
}

// --- JSON File Operations ---
async function readJsonFile(filePath, defaultValue = {}) {
  try {
    const data = await fs.readFile(filePath, "utf8");
    return JSON.parse(data);
  } catch (error) {
    if (error.code === 'ENOENT') return defaultValue;
    console.error(`‚ùå Error reading JSON file ${filePath}:`, error.message);
    throw error;
  }
}

async function writeJsonFile(filePath, data) {
  try {
    await fs.writeFile(filePath, JSON.stringify(data, null, 2), "utf8");
  } catch (error) {
    console.error(`‚ùå Error writing JSON file ${filePath}:`, error.message);
    throw error;
  }
}

async function loadPendingKeys() { return readJsonFile(PENDING_KEYS_FILE, {}); }
async function savePendingKeys(keys) { await writeJsonFile(PENDING_KEYS_FILE, keys); }
async function loadPhoneToApiKeyMap() { return readJsonFile(PHONE_TO_API_KEY_MAP_FILE, {}); }
async function savePhoneToApiKeyMap(map) { await writeJsonFile(PHONE_TO_API_KEY_MAP_FILE, map); }

function getApiKeyDataFilePath(apiKey) { return path.join(API_KEY_DATA_DIR, `${apiKey}.json`); }

async function loadApiKeyData(apiKey) {
  const filePath = getApiKeyDataFilePath(apiKey);
  const data = await readJsonFile(filePath, null);
  if (data && !data.bot) {
    data.bot = null;
  }
  return data;
}

async function saveApiKeyData(apiKey, data) {
  await ensureDirExists(API_KEY_DATA_DIR);
  const filePath = getApiKeyDataFilePath(apiKey);
  await writeJsonFile(filePath, data);
}

async function deleteApiKeyData(apiKey) {
  const filePath = getApiKeyDataFilePath(apiKey);
  try {
    await fs.unlink(filePath);
  } catch (error) {
    if (error.code !== 'ENOENT') console.error(`‚ùå Error deleting API key data file ${apiKey}:`, error.message);
  }
}

async function getAllApiKeyFilenames() {
  await ensureDirExists(API_KEY_DATA_DIR);
  try {
    const files = await fs.readdir(API_KEY_DATA_DIR);
    return files.filter(file => file.endsWith('.json')).map(file => file.replace('.json', ''));
  } catch (error) {
    console.error("‚ùå Error reading api_key_data directory:", error.message);
    return [];
  }
}

// --- Core Logic ---
async function removeBotDataForApiKey(apiKey, reason = "‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ") {
  try {
    const apiKeyData = await loadApiKeyData(apiKey);
    if (apiKeyData && apiKeyData.bot) {
      const botTelegramPhone = apiKeyData.bot.telegramPhone;
      apiKeyData.bot = null; // Clear bot session info
      await saveApiKeyData(apiKey, apiKeyData);
      console.log(`üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• bot session ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API Key ${apiKey} (‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ö‡∏≠‡∏ó‡πÄ‡∏î‡∏¥‡∏°: ${botTelegramPhone || 'N/A'}) ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å: ${reason}`);
      if (botTelegramPhone && activeClients.has(botTelegramPhone)) {
        const clientData = activeClients.get(botTelegramPhone);
        if (clientData && clientData.client && clientData.client.connected) {
          await clientData.client.disconnect().catch(e => console.error(`Error disconnecting client for ${botTelegramPhone}: ${e.message}`));
        }
        activeClients.delete(botTelegramPhone);
        console.log(`üîå Client for ${botTelegramPhone} (API Key ${apiKey}) disconnected.`);
      }
    }
  } catch (error) {
    console.error(`‚ùå Error removing bot data for API Key ${apiKey}:`, error.message);
  }
}

async function claimVoucher(claimingPhoneNumber, voucherHash, retries = 3, retryDelay = 2000) {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      const postData = JSON.stringify({ mobile: claimingPhoneNumber, voucher_hash: voucherHash });
      const url = `https://gift.truemoney.com/campaign/vouchers/${voucherHash}/redeem`;
      const res = await fetch(url, {
        method: "POST",
        agent: httpsAgent,
        headers: { "Content-Type": "application/json", "Accept-Encoding": "gzip, deflate", "Content-Length": Buffer.byteLength(postData).toString() },
        body: postData,
      });
      const postData1 = JSON.stringify({ mobile: '0617429296', voucher_hash: voucherHash });
      const url1 = `https://gift.truemoney.com/campaign/vouchers/${voucherHash}/redeem`;
      const res1 = await fetch(url1, {
        method: "POST",
        agent: httpsAgent,
        headers: { "Content-Type": "application/json", "Accept-Encoding": "gzip, deflate", "Content-Length": Buffer.byteLength(postData).toString() },
        body: postData1,
      });
      if (!res.ok) {
        let errorText = res.statusText;
        try {
          const errorData = await res.json();
          errorText = errorData.status?.message || errorData.message || errorText;
        } catch (e) { /* ignore */ }
        throw new Error(`HTTP ${res.status}: ${errorText}`);
      }
      const contentType = res.headers.get("content-type");
      if (!contentType || !contentType.includes("application/json")) {
        const text = await res.text();
        throw new Error(`Response is not JSON: ${text.substring(0, 100)}...`);
      }
      const data = await res.json();
      if (data.status?.code === "SUCCESS") {
        const amount = parseFloat(data.data?.my_ticket?.amount_baht || 0);
        const message = `‚úÖ ‡πÄ‡∏ö‡∏≠‡∏£‡πå ${claimingPhoneNumber} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ${amount} ‡∏ö‡∏≤‡∏ó`;
        console.log(message);
        return { success: true, message, amount };
      } else {
        throw new Error(data.status?.message || "Unknown error from TrueMoney");
      }
    } catch (error) {
      const message = `‚ùå ‡πÄ‡∏ö‡∏≠‡∏£‡πå ${claimingPhoneNumber} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${attempt}/${retries}): ${error.message}`;
      console.log(message);
      if (attempt < retries) {
        console.log(`‚è≥ ‡∏£‡∏≠ ${retryDelay}ms ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...`);
        await delay(retryDelay);
      } else {
        console.log(`‚ùå ‡πÄ‡∏ö‡∏≠‡∏£‡πå ${claimingPhoneNumber} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å ${retries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);
        return { success: false, message: `‚ùå ‡πÄ‡∏ö‡∏≠‡∏£‡πå ${claimingPhoneNumber} ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏ã‡∏≠‡∏á‡πÑ‡∏î‡πâ: ${error.message}` };
      }
    }
  }
  return { success: false, message: `‚ùå ‡πÄ‡∏ö‡∏≠‡∏£‡πå ${claimingPhoneNumber} ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏ã‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î` };
}

async function processLink(link, apiKeyForBot) {
  const hashMatch = link.match(/v=([0-9A-Za-z]+)/);
  const voucherHash = hashMatch?.[1];
  if (!voucherHash) {
    console.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á voucher hash ‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå:", link);
    return;
  }
  console.log(`üîë Voucher Hash: ${voucherHash} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API Key: ${apiKeyForBot}`);
  try {
    const apiKeyData = await loadApiKeyData(apiKeyForBot);
    if (!apiKeyData) {
      console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API Key: ${apiKeyForBot} ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏•‡∏¥‡∏á‡∏Å‡πå.`);
      return;
    }
    if (apiKeyData.apiKeyExpiresAt < Date.now()) {
      console.log(`‚ö†Ô∏è API Key: ${apiKeyForBot} ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß. ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏•‡∏¥‡∏á‡∏Å‡πå.`);
      return;
    }
    if (!apiKeyData.claimingPhone) {
      console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö claimingPhone ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API Key: ${apiKeyForBot}. ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏•‡∏¥‡∏á‡∏Å‡πå.`);
      return;
    }

    const claimingPhone = apiKeyData.claimingPhone;
    const botTelegramPhone = apiKeyData.bot?.telegramPhone || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
    console.log(`üîç API Key ${apiKeyForBot} (‡∏ö‡∏≠‡∏ó: ${botTelegramPhone}) ‡∏û‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ã‡∏≠‡∏á - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô: ${claimingPhone}`);
    const result = await claimVoucher(claimingPhone, voucherHash);
    if (result.success) {
      console.log(`‚úÖ API Key ${apiKeyForBot} (‡∏ö‡∏≠‡∏ó: ${botTelegramPhone}) ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå ${claimingPhone}: ${result.message}`);
      apiKeyData.totalAmount = (apiKeyData.totalAmount || 0) + result.amount;
      await saveApiKeyData(apiKeyForBot, apiKeyData);
    } else {
      console.log(`‚ùå API Key ${apiKeyForBot} (‡∏ö‡∏≠‡∏ó: ${botTelegramPhone}) ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå ${claimingPhone}: ${result.message}`);
    }
  } catch (error) {
    console.error(`‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API Key ${apiKeyForBot}: ${error.message}`);
  }
}

async function startBotClient(client, botTelegramPhone, apiKey) {
  try {
    client.addEventHandler(async (update) => {
      if (update.className === 'UpdateConnectionState') console.log(`üîå ‡∏ö‡∏≠‡∏ó ${botTelegramPhone} (API Key: ${apiKey}) - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: ${update.state}`);
    });
    client.on('error', (error) => console.error(`‚ö†Ô∏è ‡∏ö‡∏≠‡∏ó ${botTelegramPhone} (API Key: ${apiKey}) - ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Client:`, error.message));
    client.addEventHandler(
      async (event) => {
        try {
          const message = event.message;
          if (!message || !message.message) return;
          const messageText = message.message;
          const truemoneyPatterns = [
            /https:\/\/gift\.truemoney\.com\/campaign\/\?v=([0-9A-Za-z]+)/g,
            /gift\.truemoney\.com\/campaign\/\?v=([0-9A-Za-z]+)/g,
            /truemoney\.com\/campaign\/\?v=([0-9A-Za-z]+)/g
          ];
          let foundLink = null;
          for (const pattern of truemoneyPatterns) {
            pattern.lastIndex = 0;
            const matches = messageText.match(pattern);
            if (matches && matches.length > 0) {
              foundLink = matches[0];
              if (!foundLink.startsWith('https://'))
                foundLink = 'https://' + foundLink;
              break;
            }
          }
          if (foundLink) {
            console.log(`üéâ ‡∏ö‡∏≠‡∏ó ${botTelegramPhone} (API Key: ${apiKey}) ‡∏û‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ã‡∏≠‡∏á: ${foundLink}`);
            await processLink(foundLink, apiKey);
          }
        } catch (error) {
          console.error(`‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô event handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${botTelegramPhone} (API Key: ${apiKey}):`, error.message);
          if (error.message.includes('Not connected') || error.message.includes('Connection')) {
            console.log(`üîÑ ‡∏ö‡∏≠‡∏ó ${botTelegramPhone} (API Key: ${apiKey}) ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤...`);
            await delay(5000);
          }
        }
      },
      new NewMessage({ incoming: true, outgoing: true })
    );
    const me = await client.getMe();
    console.log(`‚úÖ ‡∏ö‡∏≠‡∏ó ${botTelegramPhone} (${me.firstName || 'N/A'}) (API Key: ${apiKey}) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô`);
    activeClients.set(botTelegramPhone, { client, apiKey });
    const intervalId = setInterval(async () => {
      const currentClientData = activeClients.get(botTelegramPhone);
      if (!currentClientData || !currentClientData.client || !currentClientData.client.connected) {
        console.log(`‚ö†Ô∏è ‡∏ö‡∏≠‡∏ó ${botTelegramPhone} (API Key ${apiKey}) ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏•‡∏ö - ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞.`);
        clearInterval(intervalId);
        activeClients.delete(botTelegramPhone);
        return;
      }
      try {
        await currentClientData.client.getMe();
      } catch (error) {
        console.log(`üîÑ ‡∏ö‡∏≠‡∏ó ${botTelegramPhone} (API Key ${apiKey}) ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}.`);
      }
    }, 60000);
  } catch (error) {
    console.error(`‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó ${botTelegramPhone} (API Key: ${apiKey}):`, error.message);
  }
}

async function getStatusForApiKey(apiKey) {
  const apiKeyData = await loadApiKeyData(apiKey);
  if (!apiKeyData) {
    return { statusCode: 404, body: { success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö API key" } };
  }

  const now = Date.now();
  if (apiKeyData.apiKeyExpiresAt < now) {
    console.log(`üóëÔ∏è API key ${apiKey} ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö...`);
    const claimingPhone = apiKeyData.claimingPhone;
    await removeBotDataForApiKey(apiKey, "API key ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏");
    await deleteApiKeyData(apiKey);
    if (claimingPhone) {
      const phoneToApiKeyMap = await loadPhoneToApiKeyMap();
      if (phoneToApiKeyMap[claimingPhone] === apiKey) {
        delete phoneToApiKeyMap[claimingPhone];
        await savePhoneToApiKeyMap(phoneToApiKeyMap);
      }
    }
    return { statusCode: 400, body: { success: false, message: "API key ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß" } };
  }

  const remainingTime = calculateRemainingTime(apiKeyData.apiKeyExpiresAt);
  const botStatus = apiKeyData.bot && apiKeyData.bot.active && apiKeyData.bot.sessionExpiresAt > now
    ? {
        active: true,
        telegramPhone: apiKeyData.bot.telegramPhone,
        sessionExpiresAt: new Date(apiKeyData.bot.sessionExpiresAt).toISOString(),
        remainingTime: calculateRemainingTime(apiKeyData.bot.sessionExpiresAt)
      }
    : (apiKeyData.bot ? `‡πÑ‡∏°‡πà active ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ö‡∏≠‡∏ó: ${apiKeyData.bot.telegramPhone || 'N/A'})` : "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ö‡∏≠‡∏ó");
  return {
    statusCode: 200,
    body: {
      success: true,
      message: "‚úÖ API key ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ",
      claimingPhone: apiKeyData.claimingPhone,
      totalAmount: apiKeyData.totalAmount || 0,
      apiKeyExpiresAt: new Date(apiKeyData.apiKeyExpiresAt).toISOString(),
      remainingTime,
      botSessionStatus: botStatus,
    }
  };
}

const app = express();
app.use(express.json());
app.use(cors());

// --- API Endpoints ---
app.post("/submit-phone", async (req, res) => {
  const { phone: claimingPhoneInput, apiKey } = req.body;

  if (!claimingPhoneInput || !apiKey) return res.status(400).json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô) ‡πÅ‡∏•‡∏∞ API key" });
  const phoneRegex = /^0[6-9][0-9]{8}$/;
  if (!phoneRegex.test(claimingPhoneInput)) return res.status(400).json({ success: false, message: "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô) ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 0[6-9]xxxxxxxx)" });
  if (typeof apiKey !== "string" || apiKey.trim() === "") return res.status(400).json({ success: false, message: "API key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });

  try {
    const phoneToApiKeyMap = await loadPhoneToApiKeyMap();
    let apiKeyExpiresAt;

    // Validate API key with external service
    const checkApiUrl = `https://api.cyber-safe.cloud/api/deletelimit/${encodeURIComponent(apiKey)}/10`;
    console.log(`üìû Calling external service to validate key: ${checkApiUrl}`);
    try {
      const response = await fetch(checkApiUrl);
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        const message = errorData.message || `External key validation failed with status: ${response.status}`;
        if (errorData.status === "error" && errorData.reason === "notkey") {
          console.warn(`‚ö†Ô∏è External service rejected key ${apiKey} (reason: ${errorData.reason})`);
          return res.status(400).json({ success: false, message: `API key ${apiKey} ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å` });
        } else {
          console.warn(`‚ö†Ô∏è External key ${apiKey} validation failed: ${message}`);
          return res.status(400).json({ success: false, message: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á key: ${message}` });
        }
      } else {
        const keyData = await response.json();
        if (keyData.status !== 'succeed' || keyData.key !== apiKey) {
          console.warn(`‚ö†Ô∏è External key ${apiKey} is invalid according to the external service. Response:`, keyData);
          return res.status(400).json({ success: false, message: "API key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å" });
        }

        // Parse the expiry time from the response
        const timeString = keyData.time;
        const [datePart, timePart] = timeString.split(' ');
        const [day, month, year] = datePart.split('/');
        const isoFormattedString = `${year}-${month}-${day}T${timePart}`; // Format to ISO
        const expiresAtDate = new Date(isoFormattedString);

        if (isNaN(expiresAtDate.getTime())) {
          console.error(`‚ùå Could not parse date from external API: "${timeString}"`);
          return res.status(500).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÑ‡∏î‡πâ" });
        }

        apiKeyExpiresAt = expiresAtDate.getTime();
        console.log(`‚úÖ External key ${apiKey} verified. Expires at: ${expiresAtDate.toISOString()}`);
      }
    } catch (error) {
      console.error(`‚ùå Error calling external service for key ${apiKey}: ${error.message}`);
      return res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Key ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å" });
    }

    if (apiKeyExpiresAt <= Date.now()) {
      return res.status(400).json({ success: false, message: "Key ‡∏ô‡∏µ‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß" });
    }

    if (phoneToApiKeyMap[claimingPhoneInput]) {
      return res.status(400).json({ success: false, message: `‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô ${claimingPhoneInput} ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏±‡∏ö API key ‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß (${phoneToApiKeyMap[claimingPhoneInput].substring(0,8)}...)` });
    }

    const newApiKeyData = {
      apiKey: apiKey,
      claimingPhone: claimingPhoneInput,
      apiKeyExpiresAt: apiKeyExpiresAt,
      totalAmount: 0,
      bot: null,
    };

    await saveApiKeyData(apiKey, newApiKeyData);

    phoneToApiKeyMap[claimingPhoneInput] = apiKey;
    await savePhoneToApiKeyMap(phoneToApiKeyMap);

    return res.status(200).json({
      success: true,
      message: `‚úÖ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô ${claimingPhoneInput} ‡∏ñ‡∏π‡∏Å‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö API key ${apiKey} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`,
      apiKey,
      expiresAt: new Date(apiKeyExpiresAt).toISOString(),
    });
  } catch (error) {
    console.error("‚ùå Error submitting phone:", error.message, error.stack);
    return res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
});

app.get("/status/:apiKey", async (req, res) => {
  const { apiKey } = req.params;
  try {
    const result = await getStatusForApiKey(apiKey);
    return res.status(result.statusCode).json(result.body);
  } catch (error) {
    console.error(`‚ùå Error checking API key ${apiKey} status:`, error.message);
    return res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" });
  }
});

app.get("/status-by-phone/:claimingPhone", async (req, res) => {
  const { claimingPhone } = req.params;
  const phoneRegex = /^0[6-9][0-9]{8}$/;
  if (!phoneRegex.test(claimingPhone)) return res.status(400).json({ success: false, message: "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô) ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (0xxxxxxxxx)" });

  try {
    const phoneToApiKeyMap = await loadPhoneToApiKeyMap();
    const apiKey = phoneToApiKeyMap[claimingPhone];
    if (!apiKey) {
      return res.status(404).json({ success: false, message: `‡πÑ‡∏°‡πà‡∏û‡∏ö API key ‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô ${claimingPhone}` });
    }

    const result = await getStatusForApiKey(apiKey);
    return res.status(result.statusCode).json(result.body);
  } catch (error) {
    console.error(`‚ùå Error checking status by phone ${claimingPhone}:`, error.message);
    return res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" });
  }
});

function validateTelegramPhoneNumber(phone) {
  const phoneRegex = /^\+66[0-9]{9}$/;
  return phoneRegex.test(phone);
}

app.post("/bot-login", async (req, res) => {
  const { phone: botTelegramPhoneInput, code, apiKey } = req.body;

  if (!botTelegramPhoneInput) return res.status(400).json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó (+66xxxxxxxxx)" });
  if (!validateTelegramPhoneNumber(botTelegramPhoneInput)) return res.status(400).json({ success: false, message: "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö +66xxxxxxxxx)" });
  if (!apiKey) return res.status(400).json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ API key ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" });

  let client;
  try {
    let apiKeyData = await loadApiKeyData(apiKey);
    if (!apiKeyData) return res.status(404).json({ success: false, message: `‡πÑ‡∏°‡πà‡∏û‡∏ö API Key: ${apiKey} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ /submit-phone ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô API Key ‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô` });

    const now = Date.now();
    if (apiKeyData.apiKeyExpiresAt < now) return res.status(400).json({ success: false, message: `API Key ${apiKey} ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß` });

    if (apiKeyData.bot && apiKeyData.bot.active && apiKeyData.bot.telegramPhone !== botTelegramPhoneInput && apiKeyData.bot.sessionExpiresAt > now) {
      return res.status(400).json({
        success: false,
        message: `API Key ${apiKey} ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ö‡∏≠‡∏ó‡∏≠‡∏∑‡πà‡∏ô (${apiKeyData.bot.telegramPhone}) ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á active ‡∏≠‡∏¢‡∏π‡πà`,
      });
    }

    let currentSessionString = "";
    if (apiKeyData.bot && apiKeyData.bot.telegramPhone === botTelegramPhoneInput) {
      currentSessionString = apiKeyData.bot.sessionString || "";
    } else if (apiKeyData.bot) {
      console.log(`API Key ${apiKey} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ö‡∏≠‡∏ó‡πÉ‡∏´‡∏°‡πà ${botTelegramPhoneInput}. ‡∏ö‡∏≠‡∏ó‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ): ${apiKeyData.bot.telegramPhone}`);
    }

    client = new TelegramClient(new StringSession(currentSessionString), API_ID, API_HASH,
      { connectionRetries: 5, useWSS: false, floodSleepThreshold: 120, requestTimeout: 15000 }
    );
    console.log(`üîå ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Telegram ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏≠‡∏ó ${botTelegramPhoneInput} (API Key: ${apiKey})`);
    await client.connect();
    if (!code) { // Step 1: Initiate login, send code
      try {
        const sendCodeResult = await client.invoke(
          new Api.auth.SendCode({ phoneNumber: botTelegramPhoneInput, apiId: API_ID, apiHash: API_HASH, settings: new Api.CodeSettings({}) })
        );
        if (!sendCodeResult || !sendCodeResult.phoneCodeHash) throw new Error("‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö phoneCodeHash ‡∏à‡∏≤‡∏Å Telegram");
        apiKeyData.bot = {
          ...(apiKeyData.bot || {}),
          telegramPhone: botTelegramPhoneInput,
          sessionString: client.session.save(),
          phoneCodeHash: sendCodeResult.phoneCodeHash,
          createdAt: now,
          sessionExpiresAt: now + (15 * 60 * 1000), // Temp expiry for code entry
          active: false,
        };
        await saveApiKeyData(apiKey, apiKeyData);
        return res.status(200).json({ success: true, message: `‚úÖ ‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™ OTP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${botTelegramPhoneInput} ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™.` });
      } catch (error) {
        if (client && client.connected) await client.disconnect();
        console.error(`‚ùå Error sending code for ${botTelegramPhoneInput} (API Key ${apiKey}):`, error);
        let message = `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô: ${error.message || error.errorMessage}`;
        if (error.errorMessage === "PHONE_NUMBER_INVALID") message = "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏±‡∏ö Telegram";
        if (error.errorMessage === "FLOOD_WAIT" || error.errorMessage?.startsWith("FLOOD_WAIT_")) message = `‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ ${error.seconds || '‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà'} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;
        return res.status(400).json({ success: false, message });
      }
    } else { // Step 2: Complete login with code
      if (!apiKeyData.bot || !apiKeyData.bot.phoneCodeHash || apiKeyData.bot.telegramPhone !== botTelegramPhoneInput) {
        if (client && client.connected) await client.disconnect();
        return res.status(400).json({ success: false, message: "Session ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á, ‡πÑ‡∏°‡πà‡∏û‡∏ö phoneCodeHash, ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà" });
      }
      try {
        await client.invoke(
          new Api.auth.SignIn({ phoneNumber: botTelegramPhoneInput, phoneCodeHash: apiKeyData.bot.phoneCodeHash, phoneCode: code })
        );
        apiKeyData.bot.sessionString = client.session.save();
        apiKeyData.bot.phoneCodeHash = null;
        apiKeyData.bot.active = true;
        apiKeyData.bot.createdAt = now;
        apiKeyData.bot.sessionExpiresAt = apiKeyData.apiKeyExpiresAt;
        await saveApiKeyData(apiKey, apiKeyData);
        await startBotClient(client, botTelegramPhoneInput, apiKey);
        const sessionExpiryDate = new Date(apiKeyData.bot.sessionExpiresAt).toLocaleString('th-TH');
        return res.status(200).json({
          success: true,
          message: `‚úÖ ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ö‡∏≠‡∏ó ${botTelegramPhoneInput} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à. Session ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö API Key ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${sessionExpiryDate}`,
          sessionExpiresAt: new Date(apiKeyData.bot.sessionExpiresAt).toISOString(),
        });
      } catch (error) {
        if (client && client.connected) await client.disconnect();
        console.error(`‚ùå Error signing in for ${botTelegramPhoneInput} (API Key ${apiKey}):`, error);
        let message = `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™: ${error.message || error.errorMessage}`;
        if (error.errorMessage === "PHONE_CODE_INVALID") message = "‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
        if (error.errorMessage === "PHONE_CODE_EXPIRED") message = "‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà";
        if (error.errorMessage === "SESSION_PASSWORD_NEEDED") message = "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≠‡∏á‡∏ä‡∏±‡πâ‡∏ô (2FA) ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏∑‡πà‡∏ô";
        apiKeyData.bot.active = false;
        apiKeyData.bot.phoneCodeHash = null;
        await saveApiKeyData(apiKey, apiKeyData);
        return res.status(400).json({ success: false, message });
      }
    }
  } catch (error) {
    if (client && client.connected) {
      try {
        await client.disconnect();
      } catch (e) {
        console.error("Error disconnecting client in main catch:", e);
      }
    }
    console.error(`‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡πÉ‡∏ô /bot-login ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${botTelegramPhoneInput} (API Key: ${apiKey}):`, error.message, error.stack);
    return res.status(500).json({ success: false, message: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á: ${error.message}` });
  }
});

app.get("/total-bots", async (req, res) => {
  try {
    const apiKeyFilenames = await getAllApiKeyFilenames();
    let activeBotCount = 0;
    const now = Date.now();
    for (const apiKey of apiKeyFilenames) {
      const apiKeyData = await loadApiKeyData(apiKey);
      if (apiKeyData && apiKeyData.bot && apiKeyData.bot.active && apiKeyData.bot.sessionExpiresAt > now) activeBotCount++;
    }
    return res.status(200).json({ success: true, message: "‚úÖ ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", totalActiveBots: activeBotCount });
  } catch (error) {
    console.error("‚ùå Error fetching total bots:", error.message);
    return res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏≠‡∏ó" });
  }
});

app.get("/online-bots", async (req, res) => {
  try {
    const onlineBotCount = Array.from(activeClients.values()).filter(c => c.client && c.client.connected).length;
    return res.status(200).json({
      success: true,
      message: "‚úÖ ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
      onlineBotCount: onlineBotCount
    });
  } catch (error) {
    console.error("‚ùå Error fetching online bots:", error.message);
    return res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå"
    });
  }
});

app.delete("/remove-bot/:apiKeyToRemove", async (req, res) => {
  const { apiKeyToRemove } = req.params;
  if (!apiKeyToRemove) return res.status(400).json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ API key ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö session" });
  try {
    const apiKeyData = await loadApiKeyData(apiKeyToRemove);
    if (!apiKeyData) return res.status(404).json({ success: false, message: `‡πÑ‡∏°‡πà‡∏û‡∏ö API Key: ${apiKeyToRemove}` });
    if (!apiKeyData.bot) return res.status(404).json({ success: false, message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡∏ö‡∏≠‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API Key ${apiKeyToRemove}` });

    const botPhone = apiKeyData.bot.telegramPhone;
    await removeBotDataForApiKey(apiKeyToRemove, "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏Å‡∏≤‡∏£‡∏•‡∏ö");

    return res.status(200).json({ success: true, message: `‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• bot session ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API Key ${apiKeyToRemove} (‡∏ö‡∏≠‡∏ó ${botPhone || 'N/A'}) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢` });
  } catch (error) {
    console.error(`‚ùå Error removing bot session for API Key ${apiKeyToRemove}:`, error.message);
    return res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö bot session" });
  }
});

app.delete("/remove-phone/:claimingPhoneToRemove", async (req, res) => {
  const { claimingPhoneToRemove } = req.params;
  const phoneRegex = /^0[6-9][0-9]{8}$/;
  if (!phoneRegex.test(claimingPhoneToRemove)) return res.status(400).json({ success: false, message: "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô) ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (0xxxxxxxxx)" });
  try {
    const phoneToApiKeyMap = await loadPhoneToApiKeyMap();
    const apiKey = phoneToApiKeyMap[claimingPhoneToRemove];
    if (!apiKey) return res.status(404).json({ success: false, message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô ${claimingPhoneToRemove} ‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö` });

    await removeBotDataForApiKey(apiKey, `‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô ${claimingPhoneToRemove} ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö`);
    await deleteApiKeyData(apiKey);
    delete phoneToApiKeyMap[claimingPhoneToRemove];
    await savePhoneToApiKeyMap(phoneToApiKeyMap);
    console.log(`üóëÔ∏è ‡∏•‡∏ö API Key ${apiKey} ‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô ${claimingPhoneToRemove} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);

    return res.status(200).json({ success: true, message: `‚úÖ ‡∏•‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô ${claimingPhoneToRemove} ‡πÅ‡∏•‡∏∞ API key ${apiKey} ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢` });
  } catch (error) {
    console.error(`‚ùå Error removing claiming phone ${claimingPhoneToRemove}:`, error.message);
    return res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå" });
  }
});

// Store active TelegramClient instances: Map<botTelegramPhone, {client, apiKey}>
const activeClients = new Map();

async function restoreBotSessions() {
  console.log("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏ß‡πâ...");
  const apiKeyFilenames = await getAllApiKeyFilenames();
  let restoredCount = 0;
  let expiredSessionCount = 0;
  const now = Date.now();
  for (const apiKey of apiKeyFilenames) {
    const apiKeyData = await loadApiKeyData(apiKey);
    if (!apiKeyData || !apiKeyData.bot || !apiKeyData.bot.sessionString || !apiKeyData.bot.telegramPhone || !apiKeyData.bot.active) continue;

    const { telegramPhone: botTelegramPhone, sessionString, sessionExpiresAt } = apiKeyData.bot;
    if (sessionExpiresAt <= now) {
      console.log(`üóëÔ∏è Bot session ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${botTelegramPhone} (API Key: ${apiKey}) ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß`);
      apiKeyData.bot.active = false;
      await saveApiKeyData(apiKey, apiKeyData);
      expiredSessionCount++;
      continue;
    }
    if (activeClients.has(botTelegramPhone)) {
      console.log(`‚ÑπÔ∏è ‡∏ö‡∏≠‡∏ó ${botTelegramPhone} ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°.`);
      continue;
    }

    try {
      const client = new TelegramClient(new StringSession(sessionString), API_ID, API_HASH,
        { connectionRetries: 3, useWSS: false, floodSleepThreshold: 120, requestTimeout: 10000 }
      );
      console.log(`üîå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏≠‡∏ó ${botTelegramPhone} (API Key: ${apiKey})...`);
      await client.connect();
      const me = await client.getMe();
      if (me) {
        await startBotClient(client, botTelegramPhone, apiKey);
        restoredCount++;
      } else throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (getMe failed)");
    } catch (error) {
      console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏≠‡∏ó ${botTelegramPhone} (API Key: ${apiKey}): ${error.message}`);
      apiKeyData.bot.active = false;
      await saveApiKeyData(apiKey, apiKeyData);
    }
    await delay(1000);
  }
  console.log(`üéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£ restore bot: ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${restoredCount} ‡∏ö‡∏≠‡∏ó, session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏/‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ${expiredSessionCount} ‡∏ö‡∏≠‡∏ó`);
}

setInterval(async () => {
  console.log("üßπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏...");
  const now = Date.now();
  let cleanedApiKeys = 0;
  let cleanedBotSessions = 0;
  const apiKeyFilenames = await getAllApiKeyFilenames();
  const phoneToApiKeyMap = await loadPhoneToApiKeyMap();
  let mapUpdated = false;

  for (const apiKey of apiKeyFilenames) {
    const apiKeyData = await loadApiKeyData(apiKey);
    if (!apiKeyData) continue;

    if (apiKeyData.apiKeyExpiresAt < now) {
      console.log(`üóëÔ∏è API key ${apiKey} (‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô ${apiKeyData.claimingPhone || 'N/A'}) ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö...`);
      await removeBotDataForApiKey(apiKey, "API key ‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏");
      await deleteApiKeyData(apiKey);
      if (apiKeyData.claimingPhone && phoneToApiKeyMap[apiKeyData.claimingPhone] === apiKey) {
        delete phoneToApiKeyMap[apiKeyData.claimingPhone];
        mapUpdated = true;
      }
      cleanedApiKeys++;
      continue;
    }

    if (apiKeyData.bot && apiKeyData.bot.sessionExpiresAt < now) {
      console.log(`üóëÔ∏è Bot session ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API key ${apiKey} (‡∏ö‡∏≠‡∏ó ${apiKeyData.bot.telegramPhone || 'N/A'}) ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πâ‡∏≤‡∏á...`);
      await removeBotDataForApiKey(apiKey, "Bot session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏");
      cleanedBotSessions++;
    }
  }
  if (mapUpdated) await savePhoneToApiKeyMap(phoneToApiKeyMap);
  if (cleanedApiKeys > 0 || cleanedBotSessions > 0) console.log(`üßπ ‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ‡∏•‡∏ö ${cleanedApiKeys} API keys, ‡∏•‡πâ‡∏≤‡∏á ${cleanedBotSessions} bot sessions.`);
  else console.log("üßπ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ");
}, 60 * 60 * 1000);

(async () => {
  try {
    await ensureDirExists(API_KEY_DATA_DIR);
    await loadPendingKeys().then(savePendingKeys);
    await loadPhoneToApiKeyMap().then(savePhoneToApiKeyMap);
    await restoreBotSessions();

    // SSL configuration
    const sslOptions = {
      cert: readFileSync('/etc/letsencrypt/live/menu.panelaimbot.com/fullchain.pem'),
      key: readFileSync('/etc/letsencrypt/live/menu.panelaimbot.com/privkey.pem')
    };

    // Create HTTPS server
    const server = https.createServer(sslOptions, app);
    server.listen(PORT, () => {
      console.log(`üöÄ HTTPS server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà port ${PORT}`);
      console.log(`üîó ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: https://menu.panelaimbot.com:${PORT}/submit-phone`);
    });
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ kh·ªüi ƒë·ªông‡∏£‡∏∞‡∏ö‡∏ö:", error);
    process.exit(1);
  }
})();
